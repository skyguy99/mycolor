{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/node_modules/react-native-textinput-effects/lib/Makiko.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BaseInput from \"./BaseInput\";\n\nvar Makiko = function (_BaseInput) {\n  _inherits(Makiko, _BaseInput);\n\n  var _super = _createSuper(Makiko);\n\n  function Makiko() {\n    _classCallCheck(this, Makiko);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Makiko, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          iconClass = _this$props.iconClass,\n          iconColor = _this$props.iconColor,\n          iconName = _this$props.iconName,\n          iconSize = _this$props.iconSize,\n          iconWidth = _this$props.iconWidth,\n          containerStyle = _this$props.style,\n          inputHeight = _this$props.height,\n          inputPadding = _this$props.inputPadding,\n          inputStyle = _this$props.inputStyle,\n          label = _this$props.label,\n          labelStyle = _this$props.labelStyle;\n      var _this$state = this.state,\n          width = _this$state.width,\n          focusedAnim = _this$state.focusedAnim,\n          value = _this$state.value;\n      var AnimatedIcon = Animated.createAnimatedComponent(iconClass);\n      return React.createElement(View, {\n        style: [styles.container, containerStyle],\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: {\n          position: 'absolute',\n          height: inputHeight,\n          width: width\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, React.createElement(AnimatedIcon, {\n        name: iconName,\n        color: iconColor,\n        style: {\n          position: 'absolute',\n          backgroundColor: 'transparent',\n          top: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [8, iconSize * -1, iconSize * -1]\n          }),\n          left: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [inputPadding, -22, -22]\n          }),\n          height: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [iconSize, inputHeight * 2, inputHeight * 2]\n          }),\n          fontSize: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [iconSize, iconSize * 4, iconSize * 4]\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }), React.createElement(Text, {\n        style: [styles.label, labelStyle, {\n          left: iconWidth,\n          top: inputPadding,\n          color: iconColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, label))), React.createElement(Animated.View, {\n        style: {\n          position: 'absolute',\n          backgroundColor: 'white',\n          left: iconWidth,\n          height: inputHeight,\n          width: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [0, 0, width]\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, _extends({\n        ref: this.input\n      }, this.props, {\n        style: [styles.textInput, inputStyle, {\n          width: width,\n          height: inputHeight,\n          paddingHorizontal: inputPadding\n        }],\n        value: value,\n        onBlur: this._onBlur,\n        onChange: this._onChange,\n        onFocus: this._onFocus,\n        underlineColorAndroid: 'transparent',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return Makiko;\n}(BaseInput);\n\nMakiko.propTypes = {\n  iconClass: PropTypes.func.isRequired,\n  iconName: PropTypes.string.isRequired,\n  iconColor: PropTypes.string,\n  iconSize: PropTypes.number,\n  iconWidth: PropTypes.number,\n  inputPadding: PropTypes.number,\n  height: PropTypes.number\n};\nMakiko.defaultProps = {\n  iconColor: 'white',\n  iconSize: 30,\n  iconWidth: 60,\n  height: 48,\n  inputPadding: 16,\n  easing: Easing.bezier(0.7, 0, 0.3, 1),\n  animationDuration: 300\n};\nexport { Makiko as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#CBCBCB',\n    overflow: 'hidden'\n  },\n  label: {\n    position: 'absolute',\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'white',\n    backgroundColor: 'transparent'\n  },\n  textInput: {\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/node_modules/react-native-textinput-effects/lib/Makiko.js"],"names":["React","PropTypes","BaseInput","Makiko","props","iconClass","iconColor","iconName","iconSize","iconWidth","containerStyle","style","inputHeight","height","inputPadding","inputStyle","label","labelStyle","state","width","focusedAnim","value","AnimatedIcon","Animated","createAnimatedComponent","styles","container","_onLayout","focus","position","backgroundColor","top","interpolate","inputRange","outputRange","left","fontSize","color","input","textInput","paddingHorizontal","_onBlur","_onChange","_onFocus","propTypes","func","isRequired","string","number","defaultProps","easing","Easing","bezier","animationDuration","StyleSheet","create","overflow","fontWeight","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  Text,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Makiko extends BaseInput {\n  static propTypes = {\n    /*\n     * This is the icon component you are importing from react-native-vector-icons.\n     * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\n     * iconClass={FontAwesomeIcon}\n     */\n    iconClass: PropTypes.func.isRequired,\n\n    /*\n     * Passed to react-native-vector-icons library as name prop.\n     * This icon expands and covers the input.\n     * So, the icon should not have any blank spaces for animation experience.\n     * This is the limitation for Makiko.\n     */\n    iconName: PropTypes.string.isRequired,\n\n    /*\n     * Passed to react-native-vector-icons library as color prop\n     */\n    iconColor: PropTypes.string,\n\n    /*\n     * Use iconSize and iconWidth to make the animation work for your icon\n     */\n    iconSize: PropTypes.number,\n    iconWidth: PropTypes.number,\n\n    inputPadding: PropTypes.number,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    iconColor: 'white',\n    iconSize: 30,\n    iconWidth: 60,\n    height: 48,\n    inputPadding: 16,\n    easing: Easing.bezier(0.7, 0, 0.3, 1),\n    animationDuration: 300,\n  };\n\n  render() {\n    const {\n      iconClass,\n      iconColor,\n      iconName,\n      iconSize,\n      iconWidth,\n      style: containerStyle,\n      height: inputHeight,\n      inputPadding,\n      inputStyle,\n      label,\n      labelStyle,\n    } = this.props;\n    const {\n      width,\n      focusedAnim,\n      value,\n    } = this.state;\n    const AnimatedIcon = Animated.createAnimatedComponent(iconClass);\n\n    return (\n      <View\n        style={[styles.container, containerStyle]}\n        onLayout={this._onLayout}\n      >\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <View\n            style={{\n              position: 'absolute',\n              height: inputHeight,\n              width,\n            }}\n          >\n            <AnimatedIcon\n              name={iconName}\n              color={iconColor}\n              style={{\n                position: 'absolute',\n                backgroundColor: 'transparent',\n                top: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [8, iconSize * -1, iconSize * -1],\n                }),\n                left: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [inputPadding, -22, -22],\n                }),\n                height: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [iconSize, inputHeight * 2, inputHeight * 2],\n                }),\n                fontSize: focusedAnim.interpolate({\n                  inputRange: [0, 0.2, 1],\n                  outputRange: [iconSize, iconSize * 4, iconSize * 4],\n                }),\n              }}\n            />\n            <Text\n              style={[\n                styles.label,\n                labelStyle,\n                {\n                  left: iconWidth,\n                  top: inputPadding,\n                  color: iconColor,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableWithoutFeedback>\n        <Animated.View\n          style={{\n            position: 'absolute',\n            backgroundColor: 'white',\n            left: iconWidth,\n            height: inputHeight,\n            width: focusedAnim.interpolate({\n              inputRange: [0, 0.2, 1],\n              outputRange: [0, 0, width],\n            }),\n          }}\n        />\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[\n            styles.textInput,\n            inputStyle,\n            {\n              width,\n              height: inputHeight,\n              paddingHorizontal: inputPadding,\n            },\n          ]}\n          value={value}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          underlineColorAndroid={'transparent'}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#CBCBCB',\n    overflow: 'hidden',\n  },\n  label: {\n    position: 'absolute',\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: 'white',\n    backgroundColor: 'transparent',\n  },\n  textInput: {\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}