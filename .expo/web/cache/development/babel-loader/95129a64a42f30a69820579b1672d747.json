{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component, createRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\n\nvar BaseInput = function (_Component) {\n  _inherits(BaseInput, _Component);\n\n  var _super = _createSuper(BaseInput);\n\n  function BaseInput(props, context) {\n    var _this;\n\n    _classCallCheck(this, BaseInput);\n\n    _this = _super.call(this, props, context);\n    _this.input = createRef();\n    _this._onLayout = _this._onLayout.bind(_assertThisInitialized(_this));\n    _this._onChange = _this._onChange.bind(_assertThisInitialized(_this));\n    _this._onBlur = _this._onBlur.bind(_assertThisInitialized(_this));\n    _this._onFocus = _this._onFocus.bind(_assertThisInitialized(_this));\n    _this.focus = _this.focus.bind(_assertThisInitialized(_this));\n    var value = props.value || props.defaultValue;\n    _this.state = {\n      value: value,\n      focusedAnim: new Animated.Value(value ? 1 : 0),\n      width: null\n    };\n    return _this;\n  }\n\n  _createClass(BaseInput, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var newValue = this.props.value;\n\n      if (this.props.hasOwnProperty(\"value\") && newValue !== this.state.value) {\n        this.setState({\n          value: newValue\n        });\n        var isFocused = this.inputRef().isFocused();\n\n        if (!isFocused) {\n          var isActive = Boolean(newValue);\n\n          if (isActive !== this.isActive) {\n            this._toggle(isActive);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_onLayout\",\n    value: function _onLayout(event) {\n      this.setState({\n        width: event.nativeEvent.layout.width\n      });\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(event) {\n      this.setState({\n        value: event.nativeEvent.text\n      });\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange(event);\n      }\n    }\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur(event) {\n      if (!this.state.value) {\n        this._toggle(false);\n      }\n\n      var onBlur = this.props.onBlur;\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(event) {\n      this._toggle(true);\n\n      var onFocus = this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    }\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(isActive) {\n      var _this$props = this.props,\n          animationDuration = _this$props.animationDuration,\n          easing = _this$props.easing,\n          useNativeDriver = _this$props.useNativeDriver;\n      this.isActive = isActive;\n      Animated.timing(this.state.focusedAnim, {\n        toValue: isActive ? 1 : 0,\n        duration: animationDuration,\n        easing: easing,\n        useNativeDriver: useNativeDriver || false\n      }).start();\n    }\n  }, {\n    key: \"inputRef\",\n    value: function inputRef() {\n      return this.input.current;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.props.editable !== false) {\n        this.inputRef().focus();\n      }\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputRef().blur();\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.inputRef().isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.inputRef().clear();\n    }\n  }]);\n\n  return BaseInput;\n}(Component);\n\nBaseInput.propTypes = {\n  label: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  style: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n  inputStyle: Text.propTypes.style,\n  labelStyle: Text.propTypes.style,\n  easing: PropTypes.func,\n  animationDuration: PropTypes.number,\n  useNativeDriver: PropTypes.bool,\n  editable: PropTypes.bool,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onChange: PropTypes.func\n};\nexport { BaseInput as default };","map":{"version":3,"sources":["/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/node_modules/react-native-textinput-effects/lib/BaseInput.js"],"names":["Component","createRef","PropTypes","BaseInput","props","context","input","_onLayout","bind","_onChange","_onBlur","_onFocus","focus","value","defaultValue","state","focusedAnim","Animated","Value","width","newValue","hasOwnProperty","setState","isFocused","inputRef","isActive","Boolean","_toggle","event","nativeEvent","layout","text","onChange","onBlur","onFocus","animationDuration","easing","useNativeDriver","timing","toValue","duration","start","current","editable","blur","clear","propTypes","label","string","style","ViewPropTypes","View","inputStyle","Text","labelStyle","func","number","bool"],"mappings":"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","sourcesContent":["import { Component, createRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Animated, Text, View, ViewPropTypes } from \"react-native\";\n\nexport default class BaseInput extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    value: PropTypes.string,\n    defaultValue: PropTypes.string,\n    style: ViewPropTypes ? ViewPropTypes.style : View.propTypes.style,\n    inputStyle: Text.propTypes.style,\n    labelStyle: Text.propTypes.style,\n    easing: PropTypes.func,\n    animationDuration: PropTypes.number,\n    useNativeDriver: PropTypes.bool,\n\n    editable: PropTypes.bool,\n\n    /* those are TextInput props which are overridden\n     * so, i'm calling them manually\n     */\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func,\n    onChange: PropTypes.func,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.input = createRef();\n    this._onLayout = this._onLayout.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this.focus = this.focus.bind(this);\n\n    const value = props.value || props.defaultValue;\n\n    this.state = {\n      value,\n      focusedAnim: new Animated.Value(value ? 1 : 0),\n      width: null,\n    };\n  }\n\n  componentDidUpdate() {\n    const newValue = this.props.value;\n    if (this.props.hasOwnProperty(\"value\") && newValue !== this.state.value) {\n      this.setState({\n        value: newValue,\n      });\n\n      // animate input if it's active state has changed with the new value\n      // and input is not focused currently.\n      const isFocused = this.inputRef().isFocused();\n      if (!isFocused) {\n        const isActive = Boolean(newValue);\n        if (isActive !== this.isActive) {\n          this._toggle(isActive);\n        }\n      }\n    }\n  }\n\n  _onLayout(event) {\n    this.setState({\n      width: event.nativeEvent.layout.width,\n    });\n  }\n\n  _onChange(event) {\n    this.setState({\n      value: event.nativeEvent.text,\n    });\n\n    const onChange = this.props.onChange;\n    if (onChange) {\n      onChange(event);\n    }\n  }\n\n  _onBlur(event) {\n    if (!this.state.value) {\n      this._toggle(false);\n    }\n\n    const onBlur = this.props.onBlur;\n    if (onBlur) {\n      onBlur(event);\n    }\n  }\n\n  _onFocus(event) {\n    this._toggle(true);\n\n    const onFocus = this.props.onFocus;\n    if (onFocus) {\n      onFocus(event);\n    }\n  }\n\n  _toggle(isActive) {\n    const { animationDuration, easing, useNativeDriver } = this.props;\n    this.isActive = isActive;\n    Animated.timing(this.state.focusedAnim, {\n      toValue: isActive ? 1 : 0,\n      duration: animationDuration,\n      easing,\n      useNativeDriver: useNativeDriver || false,\n    }).start();\n  }\n\n  // public methods\n\n  inputRef() {\n    return this.input.current;\n  }\n\n  focus() {\n    if (this.props.editable !== false) {\n      this.inputRef().focus();\n    }\n  }\n\n  blur() {\n    this.inputRef().blur();\n  }\n\n  isFocused() {\n    return this.inputRef().isFocused();\n  }\n\n  clear() {\n    this.inputRef().clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}