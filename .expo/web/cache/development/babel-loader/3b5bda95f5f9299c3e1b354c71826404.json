{"ast":null,"code":"var answerMap = {\n  1: [6, 4, 3, 5, 2, 1],\n  2: [2, 3, 5, 1, 4, 6],\n  3: [6, 3, 4, 5, 1, 2],\n  4: [3, 6, 5, 1, 4, 2],\n  5: [3, 5, 1, 4, 2, 6],\n  6: [5, 2, 4, 1, 6, 3],\n  7: [4, 3, 5, 2, 1, 6],\n  8: [2, 5, 1, 4, 6, 3],\n  9: [2, 6, 4, 5, 1, 3],\n  10: [3, 6, 1, 2, 5, 4],\n  11: [6, 4, 3, 5, 2, 1],\n  12: [2, 3, 5, 1, 4, 6],\n  13: [6, 3, 4, 5, 1, 2],\n  14: [3, 6, 5, 1, 4, 2],\n  15: [3, 5, 1, 4, 2, 6],\n  16: [5, 2, 4, 1, 6, 3],\n  17: [4, 3, 5, 2, 1, 6],\n  18: [2, 5, 1, 4, 6, 3],\n  19: [2, 6, 4, 5, 1, 3],\n  20: [4, 3, 1, 6, 5, 2],\n  21: [6, 2, 3, 4, 1, 5]\n};\nvar colorKey = ['orange', 'crimson', 'purple', 'blue', 'green', 'grey'];\nexport function convertIndexToAnswer(questionNo, index) {\n  return answerMap[questionNo][index];\n}\nexport function convertAnswerToIndex(questionNo, AnswerIndex) {\n  return answerMap[questionNo].indexOf(AnswerIndex);\n}\nexport function checkForTie(userAnswers) {\n  var resultObj = tallyIndexFrequencies(userAnswers);\n  var tiedColors = sortIndexes(resultObj);\n  return tiedColors;\n}\n\nfunction sortIndexes(resultObj) {\n  var sortable = [];\n\n  for (var index in resultObj) {\n    sortable.push([parseInt(index), resultObj[index]]);\n  }\n\n  sortable = sortable.sort(function (a, b) {\n    return a[1] - b[1];\n  });\n  sortable = sortable.reverse();\n  var tiedIndexes = sortable.filter(function (singleScore) {\n    return singleScore[1] === sortable[0][1];\n  });\n  tiedIndexes = tiedIndexes.map(function (singleScore) {\n    return singleScore[0];\n  });\n  return tiedIndexes;\n}\n\nexport function convertIndexToColorName(index) {\n  return colorKey[index - 1];\n}\nexport function calculateResultIndex(userAnswers) {\n  var resultObj = tallyIndexFrequencies(userAnswers);\n  var colorIndex = sortIndexes(resultObj);\n  var colorResult = convertIndexToColorName(colorIndex);\n  return colorResult;\n}\nexport function getTieBreakerAnswers(answers, step, tiedIndexes) {\n  return answers.filter(function (answer, index) {\n    var answerColorIndex = convertIndexToAnswer(step, index);\n    return tiedIndexes.includes(answerColorIndex);\n  });\n}\nexport function isTieBreakerAnswer(step, answerIndex, tiedIndexes) {\n  var answerColorIndex = convertIndexToAnswer(step, answerIndex);\n  return tiedIndexes.includes(answerColorIndex);\n}\n\nfunction tallyIndexFrequencies(userAnswers) {\n  var resultObj = {};\n\n  for (var prop in userAnswers) {\n    if (resultObj[userAnswers[prop]]) {\n      resultObj[userAnswers[prop]] += 1;\n    } else {\n      resultObj[userAnswers[prop]] = 1;\n    }\n  }\n\n  return resultObj;\n}","map":{"version":3,"sources":["/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/answerFunctions.js"],"names":["answerMap","colorKey","convertIndexToAnswer","questionNo","index","convertAnswerToIndex","AnswerIndex","indexOf","checkForTie","userAnswers","resultObj","tallyIndexFrequencies","tiedColors","sortIndexes","sortable","push","parseInt","sort","a","b","reverse","tiedIndexes","filter","singleScore","map","convertIndexToColorName","calculateResultIndex","colorIndex","colorResult","getTieBreakerAnswers","answers","step","answer","answerColorIndex","includes","isTieBreakerAnswer","answerIndex","prop"],"mappings":"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","sourcesContent":["/**\r\n * Answer map contains a correlation of questionNo\r\n * with each answer index representing its actual color key\r\n *\r\n * @type {Object}\r\n */\r\nconst answerMap = {\r\n  // self driving cars\r\n  1: [ 6, 4, 3, 5, 2, 1 ],\r\n  // college roomate in town\r\n  2: [ 2, 3, 5, 1, 4, 6 ],\r\n  // favorite aunt\r\n  3: [ 6, 3, 4, 5, 1, 2 ],\r\n  // favorite reading material\r\n  4: [ 3, 6, 5, 1, 4, 2 ],\r\n  // what place to live\r\n  5: [ 3, 5, 1, 4, 2, 6 ],\r\n  // ordering a drink\r\n  6: [ 5, 2, 4, 1, 6, 3 ],\r\n  // dream car\r\n  7: [ 4, 3, 5, 2, 1, 6 ],\r\n  // what job would be terrible\r\n  8: [ 2, 5, 1, 4, 6, 3 ],\r\n  // pet peeve\r\n  9: [ 2, 6, 4, 5, 1, 3 ],\r\n  // mythical creature\r\n  10: [ 3, 6, 1, 2, 5, 4 ],\r\n  // left phone in uber\r\n  11: [ 6, 4, 3, 5, 2, 1 ],\r\n  // people at party\r\n  12: [ 2, 3, 5, 1, 4, 6 ],\r\n  // text breakup\r\n  13: [ 6, 3, 4, 5, 1, 2 ],\r\n  // really drunk\r\n  14: [ 3, 6, 5, 1, 4, 2 ],\r\n  // paranoid facebook friends\r\n  15: [ 3, 5, 1, 4, 2, 6 ],\r\n  // free afternoon\r\n  16: [ 5, 2, 4, 1, 6, 3 ],\r\n  // brunch\r\n  17: [ 4, 3, 5, 2, 1, 6 ],\r\n  // ideal vacation\r\n  18: [ 2, 5, 1, 4, 6, 3 ],\r\n  // work recognition\r\n  19: [ 2, 6, 4, 5, 1, 3 ],\r\n  // traffic line\r\n  20: [ 4, 3, 1, 6, 5, 2 ],\r\n  // birthday text\r\n  21: [ 6, 2, 3, 4, 1, 5 ]\r\n  // people at party - old\r\n  // num: [ 3, 5, 1, 6, 2, 4 ],\r\n  // travel destination - old\r\n  // num: [ 1, 2, 3, 4, 5, 6 ],\r\n}\r\n\r\n/**\r\n * Array where the ( position + 1 ) in the array\r\n * corresponds to the value in the answer map\r\n *\r\n * @type {Array}\r\n */\r\nconst colorKey = [\r\n  'orange',\r\n  'crimson',\r\n  'purple',\r\n  'blue',\r\n  'green',\r\n  'grey'\r\n]\r\n\r\n/**\r\n * Each answer comes in as the index of the answer in the radio list\r\n * we'll need to convert this to what color the index secretly stands for\r\n * using the index above\r\n *\r\n * @param  {number} questionNo [The question number in the quiz]\r\n * @param  {number} index      [The index order of the answer]\r\n * @return {number}            [The color index value]\r\n */\r\nexport function convertIndexToAnswer(questionNo, index) {\r\n  return answerMap[questionNo][index]\r\n}\r\n\r\n/**\r\n * Each answer comes in as the index of the answer in the radio list\r\n * we'll need to convert this to what color the index secretly stands for\r\n * using the index above\r\n *\r\n * @param  {number} questionNo [The question number in the quiz]\r\n * @param  {number} index      [The index order of the answer]\r\n * @return {number}            [The color index value]\r\n */\r\nexport function convertAnswerToIndex(questionNo, AnswerIndex) {\r\n  return answerMap[questionNo].indexOf(AnswerIndex)\r\n}\r\n\r\n\r\n/**\r\n * Go through the user answers and check if there is a tie\r\n * between any color indexes and if so, return an array containing all\r\n * the indexes involved in the tie\r\n *\r\n * @param  {object} userAnswers [description]\r\n * @return {array}             [description]\r\n */\r\nexport function checkForTie(userAnswers) {\r\n  const resultObj = tallyIndexFrequencies(userAnswers)\r\n  const tiedColors = sortIndexes(resultObj)\r\n  return tiedColors\r\n}\r\n\r\nfunction sortIndexes(resultObj) {\r\n  let sortable = []\r\n  for (let index in resultObj) {\r\n    sortable.push( [ parseInt(index), resultObj[index] ] )\r\n  }\r\n  sortable = sortable.sort((a, b) => ( a[1] - b[1] ))\r\n  sortable = sortable.reverse()\r\n  // return an array of items that are tied for first place\r\n  let tiedIndexes = sortable.filter((singleScore) => ( singleScore[1] === sortable[0][1] ))\r\n  tiedIndexes = tiedIndexes.map((singleScore) => ( singleScore[0] ))\r\n  return tiedIndexes\r\n}\r\n\r\n\r\n/**\r\n * Given the answerMap index, return the corresponding\r\n * color name by looking up in the colorKey array\r\n *\r\n * @param  {number} index [description]\r\n * @return {string}       [description]\r\n */\r\nexport function convertIndexToColorName(index) {\r\n  return colorKey[index -1]\r\n}\r\n\r\n\r\nexport function calculateResultIndex(userAnswers) {\r\n  const resultObj = tallyIndexFrequencies(userAnswers)\r\n  const colorIndex = sortIndexes(resultObj)\r\n  const colorResult = convertIndexToColorName(colorIndex)\r\n  return colorResult\r\n}\r\n\r\nexport function getTieBreakerAnswers(answers, step, tiedIndexes) {\r\n  return answers.filter((answer, index) => {\r\n    const answerColorIndex = convertIndexToAnswer( step, index )\r\n    return tiedIndexes.includes(answerColorIndex)\r\n  })\r\n}\r\n\r\nexport function isTieBreakerAnswer(step, answerIndex, tiedIndexes) {\r\n  const answerColorIndex = convertIndexToAnswer( step, answerIndex )\r\n  return tiedIndexes.includes(answerColorIndex)\r\n}\r\n\r\n\r\n/**\r\n * Convert object of user answers into an object\r\n * where the properties are the color indexes, and their\r\n * corresponding values are the number of times they were\r\n * chosen as the answer\r\n *\r\n * @param  {object} userAnswers [description]\r\n * @return {object} resultObj   [description]\r\n */\r\nfunction tallyIndexFrequencies(userAnswers) {\r\n  let resultObj = {}\r\n  for ( var prop in userAnswers ) {\r\n    if ( resultObj[ userAnswers[prop] ] ) {\r\n      resultObj[userAnswers[prop]] += 1\r\n   }\r\n   else {\r\n      resultObj[userAnswers[prop]] = 1\r\n   }\r\n  }\r\n  return resultObj\r\n}\r\n"]},"metadata":{},"sourceType":"module"}