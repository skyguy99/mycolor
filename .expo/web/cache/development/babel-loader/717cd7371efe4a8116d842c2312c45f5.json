{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated, { always, block, Extrapolate, interpolate, multiply, set } from 'react-native-reanimated';\nimport { clamp, loop, timing, useValue } from 'react-native-redash';\nvar minProgress = 0;\nvar maxProgress = 1;\n\nfunction useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n  React.useEffect(function () {\n    if (!(nodeFactory instanceof Function)) {\n      console.warn('useCode() first argument should be a function that returns an animation node.');\n      var _node = nodeFactory;\n\n      nodeFactory = function nodeFactory() {\n        return _node;\n      };\n    }\n\n    var node = nodeFactory();\n\n    if (node) {\n      if (node instanceof Array) node = block(node);\n      var animatedAlways = always(node);\n\n      animatedAlways.__attach();\n\n      if (Platform.OS === 'web') {\n        animatedAlways.__onEvaluate();\n      }\n\n      return function () {\n        return animatedAlways.__detach();\n      };\n    }\n  }, dependencies);\n}\n\nfunction ProgressBar(_ref) {\n  var _ref$isIndeterminate = _ref.isIndeterminate,\n      isIndeterminate = _ref$isIndeterminate === void 0 ? false : _ref$isIndeterminate,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? isIndeterminate ? 1000 : 500 : _ref$duration,\n      _ref$isAnimated = _ref.isAnimated,\n      isAnimated = _ref$isAnimated === void 0 ? false : _ref$isAnimated,\n      _ref$progress = _ref.progress,\n      progress = _ref$progress === void 0 ? isIndeterminate ? 0.5 : 0 : _ref$progress,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 7 : _ref$height,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? height * 0.5 : _ref$borderRadius,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#007aff' : _ref$color,\n      _ref$trackColor = _ref.trackColor,\n      trackColor = _ref$trackColor === void 0 ? 'transparent' : _ref$trackColor,\n      style = _ref.style,\n      trackImage = _ref.trackImage,\n      progressImage = _ref.progressImage;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      width = _React$useState2[0],\n      setWidth = _React$useState2[1];\n\n  var progressValue = useValue(isAnimated ? 0 : progress);\n  var indeterminateValue = useValue(0);\n  var animatedWidth = interpolate(clamp(progressValue, minProgress, maxProgress), {\n    inputRange: [minProgress, maxProgress],\n    outputRange: [0, width],\n    extrapolate: Extrapolate.CLAMP\n  });\n  useCode(function () {\n    if (isAnimated) {\n      return set(progressValue, timing({\n        from: progressValue,\n        to: progress,\n        duration: duration\n      }));\n    } else {\n      return set(progressValue, progress);\n    }\n  }, [progress]);\n  useCode(function () {\n    if (isIndeterminate) {\n      var loopingIndeterminateValue = loop({\n        autoStart: true,\n        boomerang: false,\n        duration: duration\n      });\n      return set(indeterminateValue, loopingIndeterminateValue);\n    }\n\n    var animatedIndeterminateValue = timing({\n      from: indeterminateValue,\n      to: 0\n    });\n    return set(indeterminateValue, animatedIndeterminateValue);\n  }, [isIndeterminate]);\n  var translateX = useValue(0);\n\n  if (isIndeterminate) {\n    translateX = interpolate(indeterminateValue, {\n      inputRange: [0, 1],\n      outputRange: [multiply(-1, animatedWidth), width]\n    });\n  }\n\n  return React.createElement(ImageBackground, {\n    onLayout: function onLayout(e) {\n      setWidth(e.nativeEvent.layout.width);\n    },\n    resizeMode: 'stretch',\n    style: [styles.container, {\n      height: height,\n      borderRadius: borderRadius,\n      backgroundColor: trackColor\n    }, style],\n    source: trackImage\n  }, React.createElement(Animated.Image, {\n    style: [styles.bar, {\n      width: animatedWidth,\n      transform: [{\n        translateX: translateX\n      }],\n      backgroundColor: color,\n      borderRadius: borderRadius\n    }],\n    source: progressImage\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    overflow: 'hidden'\n  },\n  bar: {\n    resizeMode: 'stretch',\n    left: 0,\n    position: 'absolute',\n    height: '100%'\n  }\n});\nexport default ProgressBar;","map":{"version":3,"sources":["../src/Bar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ImageBackground,\n  ImageURISource,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  ImageBackgroundProps,\n} from 'react-native';\nimport Animated, {\n  // @ts-ignore: always isn't defined in the types\n  always,\n  block,\n  Extrapolate,\n  interpolate,\n  multiply,\n  Node,\n  set,\n} from 'react-native-reanimated';\nimport { clamp, loop, timing, useValue } from 'react-native-redash';\n\nexport type ProgressBarProps = {\n  /**\n   * If the progress bar will show indeterminate progress by looping an animation infinitely.\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * Duration to animate changes in milliseconds.\n   *\n   * @default isIndeterminate ? 1000 : 500\n   */\n  duration?: number;\n\n  /**\n   * If the bar should animate between values.\n   *\n   * @default false\n   */\n  isAnimated?: boolean;\n\n  /**\n   * The progress value (between 0 and 1).\n   *\n   * @default 0\n   */\n  progress?: number;\n\n  /**\n   * The tint color of the progress bar itself.\n   *\n   * @default #007aff\n   */\n  color?: string;\n\n  /**\n   * The tint color of the progress bar track.\n   *\n   * @default transparent\n   */\n  trackColor?: string;\n\n  /**\n   * A stretchable image to display as the progress bar.\n   */\n  progressImage?: ImageURISource | ImageURISource[];\n\n  /**\n   * A stretchable image to display behind the progress bar.\n   */\n  trackImage?: ImageURISource | ImageURISource[];\n\n  /**\n   * Height of the loading indicator.\n   *\n   * @default 7\n   */\n  height?: number;\n\n  /**\n   * Border radius of the loading indicator.\n   *\n   * @default height / 2\n   */\n  borderRadius?: number;\n\n  /**\n   * Style for the loading indicator container view.\n   */\n  style?: ImageBackgroundProps['style'];\n};\n\nconst minProgress = 0;\nconst maxProgress = 1;\n\nfunction useCode(nodeFactory, dependencies) {\n  if (!(React.useEffect instanceof Function)) return;\n\n  // @ts-ignore\n  React.useEffect(() => {\n    // check and correct 1st parameter\n    if (!(nodeFactory instanceof Function)) {\n      console.warn(\n        'useCode() first argument should be a function that returns an animation node.'\n      );\n\n      const node = nodeFactory;\n      nodeFactory = () => node;\n    }\n\n    let node = nodeFactory();\n    if (node) {\n      // allow factory to return array\n      if (node instanceof Array) node = block(node);\n\n      const animatedAlways = always(node);\n      animatedAlways.__attach();\n      // todo: upstream this\n      if (Platform.OS === 'web') {\n        animatedAlways.__onEvaluate();\n      }\n\n      // return undo function\n      return () => animatedAlways.__detach();\n    }\n  }, dependencies);\n}\n\nfunction ProgressBar({\n  isIndeterminate = false,\n  duration = isIndeterminate ? 1000 : 500,\n  isAnimated = false,\n  progress = isIndeterminate ? 0.5 : 0,\n  height = 7,\n  borderRadius = height * 0.5,\n  // Default iOS blue\n  color = '#007aff',\n  trackColor = 'transparent',\n  style,\n  trackImage,\n  progressImage,\n}: ProgressBarProps) {\n  const [width, setWidth] = React.useState(0);\n  const progressValue = useValue(isAnimated ? 0 : progress);\n  const indeterminateValue = useValue(0);\n  const animatedWidth = interpolate(\n    clamp(progressValue, minProgress, maxProgress),\n    {\n      inputRange: [minProgress, maxProgress],\n      outputRange: [0, width],\n      extrapolate: Extrapolate.CLAMP,\n    }\n  );\n\n  useCode(() => {\n    if (isAnimated) {\n      return set(\n        progressValue,\n        timing({\n          from: progressValue,\n          to: progress,\n          duration,\n        })\n      );\n    } else {\n      return set(progressValue, progress);\n    }\n  }, [progress]);\n\n  useCode(() => {\n    if (isIndeterminate) {\n      const loopingIndeterminateValue = loop({\n        autoStart: true,\n        boomerang: false,\n        duration,\n      });\n      return set(indeterminateValue, loopingIndeterminateValue);\n    }\n    const animatedIndeterminateValue = timing({\n      from: indeterminateValue,\n      to: 0,\n    });\n    return set(indeterminateValue, animatedIndeterminateValue);\n  }, [isIndeterminate]);\n\n  // todo: web has a bug where the reanimated Animated.View style is not updating unless this is an animated value.\n  let translateX: Node<number> | number = useValue(0);\n\n  if (isIndeterminate) {\n    translateX = interpolate(indeterminateValue, {\n      inputRange: [0, 1],\n      outputRange: [multiply(-1, animatedWidth), width],\n    });\n  }\n\n  return (\n    <ImageBackground\n      onLayout={(e: LayoutChangeEvent) => {\n        setWidth(e.nativeEvent.layout.width);\n      }}\n      resizeMode={'stretch'}\n      style={[\n        styles.container,\n        {\n          height,\n          borderRadius,\n          backgroundColor: trackColor,\n        },\n        style,\n      ]}\n      // @ts-ignore\n      source={trackImage}\n    >\n      <Animated.Image\n        style={[\n          styles.bar,\n          {\n            width: animatedWidth,\n            transform: [\n              {\n                translateX,\n              },\n            ],\n            backgroundColor: color,\n            borderRadius,\n          },\n        ]}\n        // @ts-ignore\n        source={progressImage}\n      />\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n  bar: {\n    resizeMode: 'stretch',\n    left: 0,\n    position: 'absolute',\n    height: '100%',\n  },\n});\n\nexport default ProgressBar;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}