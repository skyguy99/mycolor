{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/node_modules/react-native-textinput-effects/lib/Kohana.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport BaseInput from \"./BaseInput\";\n\nvar Kohana = function (_BaseInput) {\n  _inherits(Kohana, _BaseInput);\n\n  var _super = _createSuper(Kohana);\n\n  function Kohana() {\n    _classCallCheck(this, Kohana);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Kohana, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Icon = _this$props.iconClass,\n          iconColor = _this$props.iconColor,\n          iconSize = _this$props.iconSize,\n          iconName = _this$props.iconName,\n          label = _this$props.label,\n          containerStyle = _this$props.style,\n          inputPadding = _this$props.inputPadding,\n          inputStyle = _this$props.inputStyle,\n          labelStyle = _this$props.labelStyle,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          labelContainerStyle = _this$props.labelContainerStyle;\n      var _this$state = this.state,\n          focusedAnim = _this$state.focusedAnim,\n          value = _this$state.value;\n      return React.createElement(View, {\n        style: [styles.container, containerStyle],\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: _objectSpread({\n          justifyContent: 'center',\n          padding: inputPadding,\n          transform: [{\n            translateX: focusedAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [-15 - iconSize, 0]\n            })\n          }]\n        }, iconContainerStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }\n      }, React.createElement(Icon, {\n        name: iconName,\n        color: iconColor,\n        size: iconSize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }))), React.createElement(TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: _objectSpread({\n          position: 'absolute',\n          top: inputPadding,\n          left: 0,\n          transform: [{\n            translateX: focusedAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [inputPadding, 80]\n            })\n          }],\n          opacity: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0]\n          })\n        }, labelContainerStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: [styles.label, labelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, label))), React.createElement(TextInput, _extends({\n        ref: this.input\n      }, this.props, {\n        style: [styles.textInput, inputStyle, {\n          paddingHorizontal: inputPadding\n        }],\n        value: value,\n        onBlur: this._onBlur,\n        onFocus: this._onFocus,\n        onChange: this._onChange,\n        underlineColorAndroid: 'transparent',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return Kohana;\n}(BaseInput);\n\nKohana.propTypes = {\n  iconClass: PropTypes.func.isRequired,\n  iconName: PropTypes.string.isRequired,\n  iconColor: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputPadding: PropTypes.number\n};\nKohana.defaultProps = {\n  easing: Easing.bezier(0.2, 1, 0.3, 1),\n  iconSize: 25,\n  inputPadding: 16,\n  useNativeDriver: false\n};\nexport { Kohana as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    overflow: 'hidden'\n  },\n  label: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#D2D2D2'\n  },\n  textInput: {\n    flex: 1,\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/Users/skylarthomas/Desktop/Client Work/Ayzenberg /Dev/myCOLOR App/mycolor_v3/node_modules/react-native-textinput-effects/lib/Kohana.js"],"names":["React","PropTypes","BaseInput","Kohana","props","Icon","iconClass","iconColor","iconSize","iconName","label","containerStyle","style","inputPadding","inputStyle","labelStyle","iconContainerStyle","labelContainerStyle","state","focusedAnim","value","styles","container","_onLayout","focus","justifyContent","padding","transform","translateX","interpolate","inputRange","outputRange","position","top","left","opacity","input","textInput","paddingHorizontal","_onBlur","_onFocus","_onChange","propTypes","func","isRequired","string","number","defaultProps","easing","Easing","bezier","useNativeDriver","StyleSheet","create","flex","flexDirection","backgroundColor","overflow","fontSize","fontWeight","color","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  Easing,\n  Text,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Kohana extends BaseInput {\n  static propTypes = {\n    /*\n     * This is the icon component you are importing from react-native-vector-icons.\n     * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\n     * iconClass={FontAwesomeIcon}\n     */\n    iconClass: PropTypes.func.isRequired,\n    /*\n     * Passed to react-native-vector-icons library as name prop\n     */\n    iconName: PropTypes.string.isRequired,\n    /*\n     * Passed to react-native-vector-icons library as color prop\n     */\n    iconColor: PropTypes.string,\n    /*\n     * Passed to react-native-vector-icons library as size prop.\n     */\n    iconSize: PropTypes.number,\n\n    inputPadding: PropTypes.number,\n  };\n\n  static defaultProps = {\n    easing: Easing.bezier(0.2, 1, 0.3, 1),\n    iconSize: 25,\n    inputPadding: 16,\n    useNativeDriver: false,\n  };\n\n  render() {\n    const {\n      iconClass: Icon,\n      iconColor,\n      iconSize,\n      iconName,\n      label,\n      style: containerStyle,\n      inputPadding,\n      inputStyle,\n      labelStyle,\n      iconContainerStyle,\n      labelContainerStyle,\n    } = this.props;\n    const { focusedAnim, value } = this.state;\n\n    return (\n      <View\n        style={[styles.container, containerStyle]}\n        onLayout={this._onLayout}\n      >\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={{\n              justifyContent: 'center',\n              padding: inputPadding,\n              transform: [\n                {\n                  translateX: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [-15 - iconSize, 0],\n                  }),\n                },\n              ],\n              ...iconContainerStyle,\n            }}\n          >\n            <Icon name={iconName} color={iconColor} size={iconSize} />\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={{\n              position: 'absolute',\n              top: inputPadding,\n              left: 0,\n              transform: [\n                {\n                  translateX: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [inputPadding, 80],\n                  }),\n                },\n              ],\n              opacity: focusedAnim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              }),\n              ...labelContainerStyle,\n            }}\n          >\n            <Text style={[styles.label, labelStyle]}>\n              {label}\n            </Text>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[styles.textInput, inputStyle, {\n            paddingHorizontal: inputPadding,\n          }]}\n          value={value}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          onChange={this._onChange}\n          underlineColorAndroid={'transparent'}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    overflow: 'hidden',\n  },\n  label: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#D2D2D2',\n  },\n  textInput: {\n    flex: 1,\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}